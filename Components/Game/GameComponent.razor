@inject LobbyService Lobby;

@using Coord = (int X, int Y);

@* <button class="btn btn-primary" @onclick="() => {}">Click me</button> *@

<div class="game">
    @for (int x = 0; x < Game?.Width; x++) {
        @for (int y = 0; y < Game?.Height; y++) {
            Coord pos = (x, y);
            @if (Game?.Entities.World.At(pos)!.Count > 0) {
                <div class="square"
                    style="background-color: @Game.Entities.World.At(pos)![0].Color; width: @(100 / Game.Width)%;"
                >@Game.Entities.World.At((x, y))![0].Fuel</div>
            } else {
                <div class="square"
                    style="width: @(100 / Game.Width)%;"
                    onclick="@(() => Click(pos))"
                ></div>
            }
        }
    }
</div>

<style>
    .game {
        width: 100%;
        height: 700px;
        background-color: blanchedalmond;
        display: flex;
        flex-direction: row;
        flex-wrap:wrap;
    }

    .square {
        @* background-color: black; *@
        border: 1px solid black;
        box-sizing: border-box;
        height: 46.7px;
    }
</style>


@code {
    public Game Game { get; set; }
    protected override void OnInitialized()
    {
        if (Lobby?.JoinedGame == null) return;
        Game = Lobby.JoinedGame!;
        Game.Notify += () => InvokeAsync(StateHasChanged);
    }

    public void Click(Coord pos) {
        Game.Entities.AddEntity(new Fire() { Fuel = 20, Position = pos });
    }
}